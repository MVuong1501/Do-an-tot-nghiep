package com.doan.WEB_TMDT.module.inventory.service.impl;

import com.doan.WEB_TMDT.common.dto.ApiResponse;
import com.doan.WEB_TMDT.module.inventory.dto.*;
import com.doan.WEB_TMDT.module.inventory.entity.*;
import com.doan.WEB_TMDT.module.inventory.repository.*;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.time.LocalDateTime;
import java.util.*;

@Service
@RequiredArgsConstructor
public class InventoryServiceImpl implements com.doan.WEB_TMDT.module.inventory.service.InventoryService {

    private final ProductRepository productRepo;
    private final SupplierRepository supplierRepo;
    private final InventoryStockRepository stockRepo;
    private final InventoryTransactionRepository txnRepo;
    private final InventoryTransactionItemRepository itemRepo;
    private final ProductDetailRepository productDetailRepo;

    // ===========================================================
    // üß© T·∫†O S·∫¢N PH·∫®M
    // ===========================================================
    @Override
    public ApiResponse createProduct(CreateProductRequest req) {
        if (productRepo.existsBySku(req.getSku())) {
            return ApiResponse.error("SKU ƒë√£ t·ªìn t·∫°i!");
        }
        Product p = Product.builder()
                .sku(req.getSku())
                .name(req.getName())
                .brand(req.getBrand())
                .category(req.getCategory())
                .unit(req.getUnit())
                .price(req.getPrice() == null ? 0L : req.getPrice())
                .active(true)
                .build();
        productRepo.save(p);

        // t·∫°o b·∫£n ghi t·ªìn kho = 0
        InventoryStock stock = InventoryStock.builder()
                .product(p)
                .onHand(0L)
                .reserved(0L)
                .build();
        stockRepo.save(stock);

        return ApiResponse.success("T·∫°o s·∫£n ph·∫©m th√†nh c√¥ng!", p);
    }

    // ===========================================================
    // üßæ T·∫†O NH√Ä CUNG C·∫§P
    // ===========================================================
    @Override
    public ApiResponse createSupplier(CreateSupplierRequest req) {
        if (supplierRepo.existsByName(req.getName())) {
            return ApiResponse.error("Nh√† cung c·∫•p ƒë√£ t·ªìn t·∫°i!");
        }
        Supplier s = Supplier.builder()
                .name(req.getName())
                .contactName(req.getContactName())
                .phone(req.getPhone())
                .email(req.getEmail())
                .address(req.getAddress())
                .active(true)
                .build();
        supplierRepo.save(s);
        return ApiResponse.success("T·∫°o nh√† cung c·∫•p th√†nh c√¥ng!", s);
    }

    // ===========================================================
    // üì¶ NH·∫¨P KHO (IMPORT)
    // ===========================================================
    @Transactional
    @Override
    public ApiResponse importStock(ImportStockRequest req, String actorEmail) {
        Supplier supplier = null;
        if (req.getSupplierName() != null) {
            supplier = supplierRepo.findByName(req.getSupplierName()).orElse(null);
        }

        String code = genCode("IM");
        InventoryTransaction txn = InventoryTransaction.builder()
                .type(TransactionType.IMPORT)
                .code(code)
                .supplier(supplier)
                .createdAt(LocalDateTime.now())
                .createdBy(actorEmail)
                .note(req.getNote())
                .build();

        List<InventoryTransactionItem> items = new ArrayList<>();

        for (StockItemDTO dto : req.getItems()) {
            Product p = productRepo.findById(dto.getProductId())
                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m id=" + dto.getProductId()));

            long q = dto.getQuantity() == null ? 0 : dto.getQuantity();
            if (q <= 0) throw new IllegalArgumentException("S·ªë l∆∞·ª£ng ph·∫£i > 0 cho productId=" + p.getId());

            if (dto.getSerialNumbers() == null || dto.getSerialNumbers().size() != q) {
                throw new IllegalArgumentException("Danh s√°ch serial ph·∫£i kh·ªõp v·ªõi s·ªë l∆∞·ª£ng nh·∫≠p cho s·∫£n ph·∫©m: " + p.getName());
            }

            // c·∫≠p nh·∫≠t t·ªìn kho t·ªïng
            InventoryStock stock = stockRepo.findByProduct(p)
                    .orElseGet(() -> stockRepo.save(InventoryStock.builder().product(p).onHand(0L).reserved(0L).build()));
            stock.setOnHand(stock.getOnHand() + q);
            stockRepo.save(stock);

            // t·∫°o chi ti·∫øt phi·∫øu
            InventoryTransactionItem item = InventoryTransactionItem.builder()
                    .transaction(txn)
                    .product(p)
                    .quantity(q)
                    .unitCost(dto.getUnitCost())
                    .build();
            itemRepo.save(item);
            items.add(item);

            // t·∫°o chi ti·∫øt serial/IMEI
            for (String serial : dto.getSerialNumbers()) {
                if (productDetailRepo.findBySerialNumber(serial).isPresent()) {
                    throw new IllegalArgumentException("Serial/IMEI ƒë√£ t·ªìn t·∫°i: " + serial);
                }
                ProductDetail detail = ProductDetail.builder()
                        .serialNumber(serial)
                        .product(p)
                        .transactionItem(item)
                        .status(ProductStatus.IN_STOCK)
                        .build();
                productDetailRepo.save(detail);
            }
        }

        txn.setItems(items);
        txnRepo.save(txn);
        return ApiResponse.success("Nh·∫≠p kho th√†nh c√¥ng! M√£ phi·∫øu: " + code, txn);
    }

    // ===========================================================
    // üöö XU·∫§T KHO (EXPORT)
    // ===========================================================
    @Transactional
    @Override
    public ApiResponse exportStock(ExportStockRequest req, String actorEmail) {
        String code = genCode("EX");
        InventoryTransaction txn = InventoryTransaction.builder()
                .type(TransactionType.EXPORT)
                .code(code)
                .createdAt(LocalDateTime.now())
                .createdBy(actorEmail)
                .note(req.getNote())
                .build();

        List<InventoryTransactionItem> items = new ArrayList<>();

        for (StockItemDTO dto : req.getItems()) {
            Product p = productRepo.findById(dto.getProductId())
                    .orElseThrow(() -> new IllegalArgumentException("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m id=" + dto.getProductId()));

            if (dto.getSerialNumbers() == null || dto.getSerialNumbers().isEmpty()) {
                throw new IllegalArgumentException("Ph·∫£i cung c·∫•p danh s√°ch serial khi xu·∫•t h√†ng cho s·∫£n ph·∫©m: " + p.getName());
            }

            // ki·ªÉm tra serial t·ªìn t·∫°i v√† h·ª£p l·ªá
            for (String serial : dto.getSerialNumbers()) {
                ProductDetail detail = productDetailRepo.findBySerialNumber(serial)
                        .orElseThrow(() -> new IllegalArgumentException("Serial kh√¥ng t·ªìn t·∫°i: " + serial));

                if (!detail.getProduct().equals(p)) {
                    throw new IllegalArgumentException("Serial " + serial + " kh√¥ng thu·ªôc s·∫£n ph·∫©m " + p.getName());
                }
                if (detail.getStatus() != ProductStatus.IN_STOCK) {
                    throw new IllegalArgumentException("Serial " + serial + " kh√¥ng c√≤n trong kho");
                }

                // c·∫≠p nh·∫≠t tr·∫°ng th√°i serial
                detail.setStatus(ProductStatus.SOLD);
                productDetailRepo.save(detail);
            }

            // c·∫≠p nh·∫≠t t·ªìn kho t·ªïng
            InventoryStock stock = stockRepo.findByProduct(p)
                    .orElseThrow(() -> new IllegalStateException("Ch∆∞a c√≥ t·ªìn kho cho s·∫£n ph·∫©m " + p.getName()));
            stock.setOnHand(stock.getOnHand() - dto.getSerialNumbers().size());
            stockRepo.save(stock);

            InventoryTransactionItem item = InventoryTransactionItem.builder()
                    .transaction(txn)
                    .product(p)
                    .quantity((long) dto.getSerialNumbers().size())
                    .build();
            itemRepo.save(item);
            items.add(item);
        }

        txn.setItems(items);
        txnRepo.save(txn);
        return ApiResponse.success("Xu·∫•t kho th√†nh c√¥ng! M√£ phi·∫øu: " + code, txn);
    }

    // ===========================================================
    // üìä L·∫§Y DANH S√ÅCH T·ªíN KHO
    // ===========================================================
    @Override
    public ApiResponse getStocks() {
        var list = stockRepo.findAll().stream().map(s -> Map.of(
                "productId", s.getProduct().getId(),
                "sku", s.getProduct().getSku(),
                "name", s.getProduct().getName(),
                "onHand", s.getOnHand(),
                "reserved", s.getReserved(),
                "available", s.getAvailable()
        )).toList();
        return ApiResponse.success("Danh s√°ch t·ªìn kho", list);
    }

    // ===========================================================
    // ‚öôÔ∏è SINH CODE T·ª∞ ƒê·ªòNG
    // ===========================================================
    private String genCode(String prefix) {
        return prefix + "-" + System.currentTimeMillis();
    }
}
